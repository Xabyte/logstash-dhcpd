filter { 
    if [fields][type] == "dhcpd" {
        if [message] =~ /.* DHCPACK .*/ {
        #
        # DHCPACK on 10.10.1.111 to 00:0e:c4:d0:69:39 via eth1
        # DHCPACK on 10.10.1.111 to d4:a3:3d:d7:5c:d3 (clihost) via eth1
        #
        grok {
            match => [ 
                "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} on %{IP:DHCP_ClientIP} to %{MAC:DHCP_SourceMAC} via %{NOTSPACE:DHCP_Interface}",
                "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} on %{IP:DHCP_ClientIP} to %{MAC:DHCP_SourceMAC} \(%{HOSTNAME:DHCP_CliHostname}\) via %{NOTSPACE:DHCP_Interface}"
            ]
            
            # Grok focused only on DHCPACK here.
        }
        # Here is any additional logic to handle DCHPACK.
        mutate {
            gsub => [ "DHCP_Interface", ":", "" ]
            remove_field => [ "DHCP_ServerIP" ]
            add_tag => [ "matched_DHCPACK" ]
        }

        } else if [message] =~ /.* DHCPREQUEST .*/ {
            #
            # DHCPREQUEST for 10.10.1.111 from 01:02:03:04:05:06 via eth1
            # DHCPREQUEST for 10.10.1.111 (10.10.1.1) from 01:02:03:04:05:06 via eth1
            # DHCPREQUEST for 10.10.1.111 from 01:02:03:04:05:06 (clihost) via eth1
            # DHCPREQUEST for 10.10.1.111 (10.10.1.1) from 01:02:03:04:05:06 (clihost) via eth1
            #
            # DHCPREQUEST for 10.10.1.111 from 01:02:03:04:05:06 via eth1: ignored (not authoritative).
            # DHCPREQUEST for 10.10.1.111 from 01:02:03:04:05:06 (clihost) via eth1: ignored (not authoritative).
            # DHCPREQUEST for 10.10.1.111 (10.10.1.1) from 01:02:03:04:05:06 (clihost) via eth1: ignored (not authoritative).
            #

            grok {
                # Grok focused only on DHCPREQUEST here.
                match => [
                    "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} for %{IP:DHCP_ClientIP} from %{MAC:DHCP_SourceMAC} via %{NOTSPACE:DHCP_Interface}",
                    "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} for %{IP:DHCP_ClientIP} \(%{IP:DHCP_ServerIP}\) from %{MAC:DHCP_SourceMAC} via %{NOTSPACE:DHCP_Interface}",
                    "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} for %{IP:DHCP_ClientIP} from %{MAC:DHCP_SourceMAC} \(%{HOSTNAME:DHCP_CliHostname}\) via %{NOTSPACE:DHCP_Interface}",
                    "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} for %{IP:DHCP_ClientIP} \(%{IP:DHCP_ServerIP}\) from %{MAC:DHCP_SourceMAC} \(%{HOSTNAME:DHCP_CliHostname}\) via %{NOTSPACE:DHCP_Interface}",
                    "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} for %{IP:DHCP_ClientIP} from %{MAC:DHCP_SourceMAC} via %{NOTSPACE:DHCP_Interface} ignored \(%{GREEDYDATA:DHCP_FailMsg}\)",
                    "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} for %{IP:DHCP_ClientIP} from %{MAC:DHCP_SourceMAC} \(%{HOSTNAME:DHCP_CliHostname}\) via %{NOTSPACE:DHCP_Interface} ignored \(%{GREEDYDATA:DHCP_FailMsg}\)",
                    "message", "%{SYSLOGTIMESTAMP:actualTimestamp} (?:%{SYSLOGFACILITY:syslogFacility} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG:syslogProg}: %{WORD:DHCP_Event} for %{IP:DHCP_ClientIP} \(%{IP:DHCP_ServerIP}\) from %{MAC:DHCP_SourceMAC} \(%{HOSTNAME:DHCP_CliHostname}\) via %{NOTSPACE:DHCP_Interface} ignored \(%{GREEDYDATA:DHCP_FailMsg}\)" 
                ]
                
            }
            # Here is any additional logic to handle DHCPREQUEST.
            mutate {
                gsub => [ "DHCP_Interface", ":", "" ]
                remove_field => [ "DHCP_ServerIP" ]
                add_tag => [ "matched_DHCPREQUEST" ]
            }

        } else if [message] =~ /.* DHCPDISCOVER .*/ {
            grok {
                # Grok focused only on DHCPDISCOVER here.
            }
            # Here is any additional logic to handle DHCPDISCOVER.

        } else if [message] =~ /.* DHCPOFFER .*/ {
            grok {
                # Grok focused only on DHCPOFFER here.
            }
            # Here is any additional logic to handle DHCPOFFER.

        } else if [message] =~ /.* DHCPRELEASE .*/ {
            grok {
                # Grok focused only on DHCPRELEASE here.
            }
            # Here is any additional logic to handle DHCPRELEASE.

        } else if [message] =~ /.* DHCPINFORM .*/ {
            grok {
                # Grok focused only on DHCPINFORM here.:
            }
            # Here is any additional logic to handle DHCPINFORM.

        } else if [message] =~ /.* DHCPNAK .*/ {
            grok {
                # Grok focused only on DHCPNAK here.
            }
            # Here is any additional logic to handle DHCPNAK.

        } else if [message] =~ /.* DHCPDECLINE .*/ {
            grok {
                # Grok focused only on DHCPDECLINE here.
            }
            # Here is any additional logic to handle DHCPDECLINE.

        } else {
            # nothing matched above so put some generic logic and maybe add a tag indicating that it didn't match.
            mutate {
                add_tag => [ "bad_match_dhcpd" ]
            }
        }
    }
}
